upstream unicorn_<%= @application[:domains].first %> {
 server unix:<%= @application[:deploy_to]%>/shared/sockets/unicorn.sock fail_timeout=0;
}

log_format json '{"@timestamp":"$time_iso8601",'
                '"host":"$server_addr",'
                '"clientip":"$remote_addr",'
                '"size":$body_bytes_sent,'
                '"responsetime":$request_time,'
                '"upstreamtime":"$upstream_response_time",'
                '"upstreamhost":"$upstream_addr",'
                '"http_host":"$host",'
                '"url":"$uri",'
                '"xff":"$http_x_forwarded_for",'
                '"referer":"$http_referer",'
                '"agent":"$http_user_agent",'
                '"status":"$status"}';

server {
  listen 80;
  server_name <%= node[:nginx][:absolute_url] %> <%= @application[:domains].join(" ") %> <%= node[:hostname] %>;

  <% if @application[:log_format] %>
    <% @application[:log_format].each do |log_format_name| %>
    access_log <%= node[:nginx][:log_dir] %>/<%= node[:nginx][:absolute_url] %>.access.<%= log_format_name %>.log <%= log_format_name %>;
    <% end %>
  <% else %>
    access_log <%= node[:nginx][:log_dir] %>/<%= node[:nginx][:absolute_url] %>.access.log json;
  <%end %>

  keepalive_timeout <%= node[:nginx][:keepalive_timeout] %>;

  root <%= @application[:absolute_document_root] %>;

  <% if @application[:nginx] && @application[:nginx][:client_max_body_size] %>
    client_max_body_size <%= @application[:nginx][:client_max_body_size] %>;
  <% end %>

  location / {
    try_files $uri/index.html $uri/index.htm @unicorn;
  }

  location = /elb_check {
    access_log off;
    return 200 'Welcome ELB';
  }

  location @unicorn {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;

  <% if node[:nginx] && node[:nginx][:proxy_read_timeout] -%>
    proxy_read_timeout <%= node[:nginx][:proxy_read_timeout] %>;
  <% end -%>
  <% if node[:nginx] && node[:nginx][:proxy_send_timeout] -%>
    proxy_send_timeout <%= node[:nginx][:proxy_send_timeout] %>;
  <% end -%>

    # If you don't find the filename in the static files
    # Then request it from the unicorn server
    if (!-f $request_filename) {
      proxy_pass http://unicorn_<%= @application[:domains].first %>;
      break;
    }
  }

  location /nginx_status {
    stub_status on;
    access_log off;
    allow 127.0.0.1;
    deny all;
  }

  error_page 500 502 503 504 /500.html;
  location = /500.html {
    root <%= @application[:absolute_document_root] %>;
  }
  <% if node[:nginx][:need_redirect_urls] %>
  <% node[:nginx][:need_redirect_urls].each do |from_url| %>
  if ($host = '<%= from_url %>') {
    rewrite ^/(.*)$ https://<%= node[:nginx][:absolute_url] %>/$1 permanent;
  }
  <% end %>
  <% end %>
  
  # Enable cors for fonts and svgs
  # http://enable-cors.org/server_nginx.html
  location ~* \.(ttf|ttc|otf|eot|woff|svg|font.css)$ {
    add_header 'Access-Control-Allow-Origin' '*';
    add_header 'Access-Control-Allow-Credentials' 'true';
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
  }
}

server {
  server_name "~^www\.(.*)$" ;
  return 301 $scheme://$1$request_uri;
}

<% if @application[:ssl_support] %>
server {
  listen   443;
  server_name <%= node[:nginx][:absolute_url] %> <%= @application[:domains].join(" ") %> <%= node[:hostname] %>;
  access_log <%= node[:nginx][:log_dir] %>/<%= node[:nginx][:absolute_url] %>-ssl.access.log json;

  ssl on;
  ssl_certificate /etc/nginx/ssl/<%= @application[:domains].first %>.crt;
  ssl_certificate_key /etc/nginx/ssl/<%= @application[:domains].first %>.key;
  <% if @application[:ssl_certificate_ca] -%>
  ssl_client_certificate /etc/nginx/ssl/<%= @application[:domains].first %>.ca;
  <% end -%>

  keepalive_timeout <%= node[:nginx][:keepalive_timeout] %>;

  root <%= @application[:absolute_document_root] %>;

  <% if @application[:nginx] && @application[:nginx][:client_max_body_size] %>
    client_max_body_size <%= @application[:nginx][:client_max_body_size] %>;
  <% end %>

  location / {
    try_files $uri/index.html $uri/index.htm @unicorn;
  }

  location = /elb_check {
    access_log off;
    return 200 'Welcome ELB';
  }

  location @unicorn {
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;

  <% if node[:nginx] && node[:nginx][:proxy_read_timeout] -%>
    proxy_read_timeout <%= node[:nginx][:proxy_read_timeout] %>;
  <% end -%>
  <% if node[:nginx] && node[:nginx][:proxy_send_timeout] -%>
    proxy_send_timeout <%= node[:nginx][:proxy_send_timeout] %>;
  <% end -%>

    # If you don't find the filename in the static files
    # Then request it from the unicorn server
    if (!-f $request_filename) {
      proxy_pass http://unicorn_<%= @application[:domains].first %>;
      break;
    }
  }

  error_page 500 502 503 504 /500.html;
  location = /500.html {
    root <%= @application[:absolute_document_root] %>;
  }

  # Need_redirect_urls
  <% node[:nginx][:need_redirect_urls].each do |from_url| %>
  if ($host = '<%= from_url %>') {
    rewrite ^/(.*)$ https://<%= node[:nginx][:absolute_url] %>/$1 permanent;
  }
  <% end %>
  
  # Enable cors for fonts and svgs
  # http://enable-cors.org/server_nginx.html
  location ~* \.(ttf|ttc|otf|eot|woff|svg|font.css)$ {
    add_header 'Access-Control-Allow-Origin' '*';
    add_header 'Access-Control-Allow-Credentials' 'true';
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
  }
}
<% end %>
